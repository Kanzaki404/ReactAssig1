{"version":3,"sources":["logo.svg","components/navBar/navBar.jsx","components/list/list.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","tabCallback","temp2","temp2Plantes","List","tabSelected","useState","setPeople","setPlanets","useEffect","callApi","baseUrl","axios","get","then","res","push","data","results","next","catch","err","console","log","callApiPlanets","baseUrlPlanets","App","currentTab","setCurrentTab","className","cat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,yKCiB1BC,G,YAdF,SAAC,GAAkB,EAAjBC,c,uBC+EbC,EAAQ,GAiBZ,IAAIC,EAAe,GAoBJC,MAhHF,SAAC,GAAkB,EAAjBC,YAAkB,IAAD,EACAC,mBAAS,IADT,mBACbC,GADa,aAEED,mBAAS,IAFX,mBAEZE,GAFY,aAGgBF,mBAAS,IAHzB,gCAIkBA,mBAAS,KAJ3B,6BAQ5BG,qBAAU,YAoEd,SAASC,EAAQH,EAAWI,GAExBC,IAAMC,IAAN,UAAaF,IACZG,MAAK,SAAAC,GAEFb,EAAMc,KAAN,MAAAd,EAAK,YAASa,EAAIE,KAAKC,UACvBX,EAAU,GAAD,OAAKL,IACO,OAAlBa,EAAIE,KAAKE,MACTT,EAAQH,EAAUQ,EAAIE,KAAKE,SAKjCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,iBAAgBF,MAhFvCX,CAAQH,EAJK,iCAwFpB,SAASiB,EAAehB,EAAYiB,GAIhCb,IAAMC,IAAN,UAAaY,IACZX,MAAK,SAAAC,GAEFZ,EAAaa,KAAb,MAAAb,EAAY,YAASY,EAAIE,KAAKC,UAC9BV,EAAW,GAAD,OAAKL,IACM,OAAlBY,EAAIE,KAAKE,MAETK,EAAehB,EAAWO,EAAIE,KAAKE,SAKzCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,iBAAgBF,MAnGvCG,CAAehB,EAJK,oCAOrB,KCSSkB,MAvBf,WAAe,MAEuBpB,mBAAS,UAFhC,mBAENqB,EAFM,KAEMC,EAFN,KAQb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAQ5B,YAAa,SAAC6B,GAN1BF,EAMsCE,MAChC,wBAAID,UAAU,YAAYF,IAE9B,8BACA,yBAAKE,UAAU,WACX,kBAAC,EAAD,CAAMxB,YAAasB,QCVTI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.56bb7b14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport logo from '../../logo.svg';\r\n\r\nconst Navbar = ({tabCallback}) => {\r\n    \r\n    return (//update state in app depending which tab/button pressed\r\n      <nav className=\"nav-bar-style\">\r\n        <img onClick={ () => tabCallback('Search')} src={logo} alt=\"logo\" /> \r\n        <ul>\r\n            <li> <button onClick={ () => tabCallback('Search')}> Search</button> </li> \r\n            <li> <button onClick={ () => tabCallback('Favorite')}> Favorites</button> </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  };\r\n  \r\n\r\n  export default Navbar;","import React, {useEffect, useState}from 'react'\r\nimport ListItem from './list-item/list-item'\r\nimport FavItem from './list-item/favorite-list-item'\r\nimport axios from 'axios';\r\n\r\nlet binForPeople = []\r\nlet binForPlanets = []\r\nconst List = ({tabSelected}) => {\r\n    const [people, setPeople] = useState([])\r\n    const [planets, setPlanets] = useState([])\r\n    const [favoritePeople, setFavoritePeople] = useState([])\r\n    const [favoritePlanets, setFavoritePlanets] = useState([])\r\n    const baseUrl = 'https://swapi.dev/api/people/';\r\n    const baseUrlPlanets = 'https://swapi.dev/api/planets/';\r\n\r\n    useEffect(() => {\r\n       callApi(setPeople, baseUrl)\r\n       callApiPlanets(setPlanets, baseUrlPlanets)\r\n       \r\n      // eslint-disable-next-line\r\n    },[]) \r\n    \r\n    \r\n    function setToFavoriteList (element, from){ // add element to fav\r\n        if(from === \"people\"){\r\n            console.log('setToFavorite fired')\r\n            if(binForPeople.some(el => el.name === element.name)){ //check if element already exist in the list\r\n                alert('already exists')\r\n            }else{\r\n            let bin = []\r\n            bin = [...bin,element]   // set new element in bin\r\n            binForPeople.push(...bin) // save it in global binForPeople to keep data\r\n            setFavoritePeople([...binForPeople]) //save it to state\r\n            }\r\n        }else{\r\n            console.log('setToFavorite fired')\r\n            if(binForPlanets.some(el => el.name === element.name)){ //check if element already exist in the list\r\n                alert('already exists')\r\n            }else{\r\n            let bin = []\r\n            bin = [...bin,element]   // set new element in bin\r\n            binForPlanets.push(...bin) // save it in global binForPlanets to keep data\r\n            setFavoritePlanets([...binForPlanets]) //save it to state\r\n            }\r\n        }\r\n      \r\n       \r\n    }\r\n\r\n    function removeFromFavorite(element,from){ //remove element\r\n        if(from === \"people\"){\r\n            const indexPeople = binForPeople.indexOf(element) //find index of specific element\r\n            if (indexPeople > -1) {\r\n                binForPeople.splice(indexPeople, 1); //remove if correct index found\r\n              }\r\n            setFavoritePeople([...binForPeople]) // add the new list to state (with element removed)\r\n        }else{\r\n            const indexPlanets = binForPlanets.indexOf(element) //find index of specific element\r\n            if (indexPlanets > -1) {\r\n                binForPlanets.splice(indexPlanets, 1); //remove if correct index found\r\n              }\r\n            setFavoritePlanets([...binForPlanets]) // add the new list to state (with element removed)\r\n        }\r\n       \r\n        \r\n    }\r\n\r\n    return (// tabSelected data from nav component chooses which list is shown\r\n        <div className=\"listComponent\">\r\n            \r\n            \r\n            <div className=\"listItemContainer\"> \r\n                {tabSelected === 'Search' ? <ListItem data={people} dataPlanets={planets} addFav={(element,from)  => setToFavoriteList(element,from)} />: \r\n                 <FavItem favData={favoritePeople} favDataPlanets={favoritePlanets} remFav={(elem,from) => removeFromFavorite(elem,from)}/>}\r\n               \r\n                \r\n            </div>\r\n        </div>\r\n    ); \r\n};\r\n\r\n\r\nlet temp2 = []\r\nfunction callApi(setPeople, baseUrl){\r\n      \r\n    axios.get(`${baseUrl}`)\r\n    .then(res => {\r\n      \r\n        temp2.push(...res.data.results)\r\n        setPeople([...temp2])\r\n        if(res.data.next !== null){\r\n           callApi(setPeople,res.data.next)\r\n        }\r\n        \r\n       \r\n    })\r\n    .catch(err => console.log('ERROR ---> ' + err))    \r\n}\r\n\r\nlet temp2Plantes = []\r\nfunction callApiPlanets(setPlanets, baseUrlPlanets){\r\n    \r\n    //const baseUrl = 'https://swapi.dev/api/people/'\r\n  \r\n    axios.get(`${baseUrlPlanets}`)\r\n    .then(res => {\r\n        \r\n        temp2Plantes.push(...res.data.results)\r\n        setPlanets([...temp2Plantes])\r\n        if(res.data.next !== null){\r\n\r\n           callApiPlanets(setPlanets,res.data.next)\r\n        }\r\n        \r\n       \r\n    })\r\n    .catch(err => console.log('ERROR ---> ' + err))    \r\n}\r\n\r\nexport default List","import React, { useState } from 'react';\r\n\r\nimport './App.scss';\r\nimport Navbar from './components/navBar/navBar'\r\nimport List from './components/list/list'\r\n\r\nfunction App() {\r\n  //state of cuttent tab selected by user to chose which list to render\r\n  const [currentTab, setCurrentTab] = useState('Search')\r\n\r\n  function tab(category){\r\n    setCurrentTab(category)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Navbar tabCallback={(cat) => tab(cat) }/>\r\n          <h1 className=\"titleTab\">{currentTab}</h1>\r\n      </header>\r\n      <main>\r\n      <div className=\"content\">\r\n          <List tabSelected={currentTab}/>\r\n      </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}