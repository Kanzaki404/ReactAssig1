{"version":3,"sources":["logo.svg","components/navBar/navBar.jsx","components/list/list-item/list-item.jsx","components/list/list-item/favorite-list-item.jsx","components/list/list.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","tabCallback","ListItem","data","dataPlanets","addFav","useState","input","setInput","elements","filter","el","name","toLowerCase","match","eye_color","birth_year","map","e","elementsPlanet","climate","terrain","className","value","onChange","target","FavItems","favData","favDataPlanets","remFav","cat","setCat","key","onClick","elementsPlanets","showAll","tabSelected","binForPeople","binForPlanets","temp2","temp2Plantes","List","people","setPeople","planets","setPlanets","favoritePeople","setFavoritePeople","favoritePlanets","setFavoritePlanets","useEffect","callApi","baseUrl","axios","get","then","res","push","results","next","catch","err","console","log","callApiPlanets","baseUrlPlanets","element","from","some","alert","bin","setToFavoriteList","elem","indexPeople","indexOf","splice","indexPlanets","removeFromFavorite","App","currentTab","setCurrentTab","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0060a51d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport logo from '../../logo.svg';\r\n\r\nconst Navbar = ({tabCallback}) => {\r\n    \r\n    return (//update state in app depending which tab/button pressed\r\n      <nav className=\"nav-bar-style\">\r\n        <img onClick={ () => tabCallback('Search')} src={logo} alt=\"logo\" /> \r\n        <ul>\r\n            <li> <button onClick={ () => tabCallback('Search')}> Search</button> </li> \r\n            <li> <button onClick={ () => tabCallback('Favorite')}> Favorites</button> </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  };\r\n  \r\n\r\n  export default Navbar;","import React, { useState} from 'react'\r\n\r\nconst ListItem = ({data,dataPlanets,addFav}) => {\r\n    const [input, setInput] = useState('')\r\n    const elements = data.filter(el => el.name.toLowerCase().match(input.toLowerCase()) || // filter by name, eye_color, and birth year\r\n    el.eye_color.toLowerCase().match(input.toLowerCase()) ||\r\n    el.birth_year.toLowerCase().match(input.toLowerCase())).map(e => ( //at the end map the filtered list and loop to show the elements\r\n        <div className=\"card\"  key={e.name}>\r\n            <div className=\"container\">\r\n                <p>CHARACTER</p>\r\n                <div>Name:{e.name}</div>\r\n                <div>Eye Color: {e.eye_color}</div>\r\n                <div>Age:{e.birth_year}</div>\r\n                <button \r\n                    className=\"favBtn\" \r\n                    onClick={() => addFav(e,\"people\")} // so it know from which list to delete\r\n                   \r\n                    >Add To Favorites</button>\r\n            </div>\r\n        </div>\r\n    ))\r\n        //im not sure how to filter when combined due to object in other list missing keys (ex eye_color: undefined) as the other ugly duplicate code\r\n    const elementsPlanet = dataPlanets.filter(el => el.name.toLowerCase().match(input.toLowerCase()) || // filter by name, climate, and terrain\r\n    el.climate.toLowerCase().match(input.toLowerCase()) ||\r\n    el.terrain.toLowerCase().match(input.toLowerCase())).map(e => ( //at the end map the filtered list and loop to show the elements\r\n        <div className=\"card\"  key={e.name}>\r\n            <div className=\"container\">\r\n                <p>PLANET</p>\r\n                <div>Name: {e.name}</div>\r\n                <div>Climate: {e.climate}</div>\r\n                <div>Terrain: {e.terrain}</div>\r\n                <button \r\n                    className=\"favBtn\" \r\n                    onClick={() => addFav(e,\"planets\")}\r\n                   \r\n                    >Add To Favorites</button>\r\n            </div>\r\n        </div>\r\n    ))\r\n    return (\r\n        <div className=\"listContainer\">\r\n            <div className=\"searchBar\">\r\n                <input value={input} onChange={e => setInput(e.target.value)}></input>\r\n            </div>\r\n            \r\n\r\n            <div className =\"listItem\">\r\n                <div className= \"Item\">\r\n                    {elements}\r\n                </div>\r\n                <div className= \"Item\">        \r\n                    {elementsPlanet}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n      );\r\n}\r\n\r\nexport default ListItem","import React, {useState}from 'react'\r\n\r\nconst FavItems = ({favData,favDataPlanets, remFav}) => {\r\n    const [cat, setCat] = useState('all')\r\n    const elements = favData.map(e => (\r\n        <div className= \"Item\" key={e.name}>\r\n            <div className=\"card\"  >\r\n                <div className=\"container\">\r\n                    <p>CHARACTER</p>\r\n                    <div>Name: {e.name}</div>\r\n                    <div>Eye Color: {e.eye_color}</div>\r\n                    <div>Age: {e.birth_year}</div>\r\n                    <button className=\"favBtn\" onClick={()=> remFav(e, \"people\")}>Remove from Favorites</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ))\r\n\r\n    const elementsPlanets = favDataPlanets.map(e => (\r\n        <div className= \"Item\"  key={e.name}>\r\n            <div className=\"card\" >\r\n                <div className=\"container\">\r\n                    <p>PLANET</p>\r\n                    <div>Name: {e.name}</div>\r\n                    <div>Climate: {e.climate}</div>\r\n                    <div>Terrain: {e.terrain}</div>\r\n                    <button className=\"favBtn\" onClick={()=> remFav(e, \"planets\")}>Remove from Favorites</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ))\r\n    const showAll = [...elementsPlanets, ...elements];\r\n    // let current;\r\n    function tabSelected(cat){\r\n        switch(cat){\r\n            case 'all': return showAll;\r\n            case 'people': return elements;\r\n            case 'planets': return elementsPlanets;\r\n            default: return showAll;\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"listContainer\">  \r\n        <ul className=\"category\">\r\n            <li><button onClick={()=> setCat('all')}>All</button></li>|\r\n            <li><button onClick={()=> setCat('people')}>People</button></li>|\r\n            <li><button onClick={()=> setCat('planets')}>Planets</button></li>\r\n        </ul>      \r\n            <div className =\"listItem\">              \r\n                   {tabSelected(cat)}\r\n                     \r\n            </div>\r\n        </div>\r\n        \r\n      );\r\n}\r\n\r\nexport default FavItems","import React, {useEffect, useState}from 'react'\r\nimport ListItem from './list-item/list-item'\r\nimport FavItem from './list-item/favorite-list-item'\r\nimport axios from 'axios';\r\n\r\nlet binForPeople = []\r\nlet binForPlanets = []\r\nconst List = ({tabSelected}) => {\r\n    const [people, setPeople] = useState([])\r\n    const [planets, setPlanets] = useState([])\r\n    const [favoritePeople, setFavoritePeople] = useState([])\r\n    const [favoritePlanets, setFavoritePlanets] = useState([])\r\n    const baseUrl = 'https://swapi.dev/api/people/';\r\n    const baseUrlPlanets = 'https://swapi.dev/api/planets/';\r\n\r\n    useEffect(() => {\r\n       callApi(setPeople, baseUrl)\r\n       callApiPlanets(setPlanets, baseUrlPlanets)\r\n       \r\n      // eslint-disable-next-line\r\n    },[]) \r\n    \r\n    \r\n    function setToFavoriteList (element, from){ // add element to fav\r\n        if(from === \"people\"){\r\n            console.log('setToFavorite fired')\r\n            if(binForPeople.some(el => el.name === element.name)){ //check if element already exist in the list\r\n                alert('already exists')\r\n            }else{\r\n            let bin = []\r\n            bin = [...bin,element]   // set new element in bin\r\n            binForPeople.push(...bin) // save it in global binForPeople to keep data\r\n            setFavoritePeople([...binForPeople]) //save it to state\r\n            }\r\n        }else{\r\n            console.log('setToFavorite fired')\r\n            if(binForPlanets.some(el => el.name === element.name)){ //check if element already exist in the list\r\n                alert('already exists')\r\n            }else{\r\n            let bin = []\r\n            bin = [...bin,element]   // set new element in bin\r\n            binForPlanets.push(...bin) // save it in global binForPlanets to keep data\r\n            setFavoritePlanets([...binForPlanets]) //save it to state\r\n            }\r\n        }\r\n      \r\n       \r\n    }\r\n\r\n    function removeFromFavorite(element,from){ //remove element\r\n        if(from === \"people\"){\r\n            const indexPeople = binForPeople.indexOf(element) //find index of specific element\r\n            if (indexPeople > -1) {\r\n                binForPeople.splice(indexPeople, 1); //remove if correct index found\r\n              }\r\n            setFavoritePeople([...binForPeople]) // add the new list to state (with element removed)\r\n        }else{\r\n            const indexPlanets = binForPlanets.indexOf(element) //find index of specific element\r\n            if (indexPlanets > -1) {\r\n                binForPlanets.splice(indexPlanets, 1); //remove if correct index found\r\n              }\r\n            setFavoritePlanets([...binForPlanets]) // add the new list to state (with element removed)\r\n        }\r\n       \r\n        \r\n    }\r\n// tabSelected data from nav component chooses which list is shown\r\n    return (\r\n        <div className=\"listComponent\">\r\n            \r\n            \r\n            <div className=\"listItemContainer\"> \r\n                {tabSelected === 'Search' ? <ListItem data={people} dataPlanets={planets} addFav={(element,from)  => setToFavoriteList(element,from)} />: \r\n                 <FavItem favData={favoritePeople} favDataPlanets={favoritePlanets} remFav={(elem,from) => removeFromFavorite(elem,from)}/>}\r\n               \r\n                \r\n            </div>\r\n        </div>\r\n    ); \r\n};\r\n\r\n\r\nlet temp2 = []\r\nfunction callApi(setPeople, baseUrl){\r\n      \r\n    axios.get(`${baseUrl}`)\r\n    .then(res => {\r\n      \r\n        temp2.push(...res.data.results)\r\n        setPeople([...temp2])\r\n        if(res.data.next !== null){\r\n           callApi(setPeople,res.data.next)\r\n        }\r\n        \r\n       \r\n    })\r\n    .catch(err => console.log('ERROR ---> ' + err))    \r\n}\r\n\r\nlet temp2Plantes = []\r\nfunction callApiPlanets(setPlanets, baseUrlPlanets){\r\n    \r\n    //const baseUrl = 'https://swapi.dev/api/people/'\r\n  \r\n    axios.get(`${baseUrlPlanets}`)\r\n    .then(res => {\r\n        \r\n        temp2Plantes.push(...res.data.results)\r\n        setPlanets([...temp2Plantes])\r\n        if(res.data.next !== null){\r\n\r\n           callApiPlanets(setPlanets,res.data.next)\r\n        }\r\n        \r\n       \r\n    })\r\n    .catch(err => console.log('ERROR ---> ' + err))    \r\n}\r\n\r\nexport default List","import React, { useState } from 'react';\r\n\r\nimport './App.scss';\r\nimport Navbar from './components/navBar/navBar'\r\nimport List from './components/list/list'\r\n\r\nfunction App() {\r\n  //state of cuttent tab selected by user to chose which list to render\r\n  const [currentTab, setCurrentTab] = useState('Search')\r\n\r\n  function tab(category){\r\n    setCurrentTab(category)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Navbar tabCallback={(cat) => tab(cat) }/>\r\n          <h1 className=\"titleTab\">{currentTab}</h1>\r\n      </header>\r\n      <main>\r\n      <div className=\"content\">\r\n          <List tabSelected={currentTab}/>\r\n      </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}